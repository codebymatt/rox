c
name = name.lexeme
distance = 1
n
@environment.get_at(1, name.lexeme)
@environment.get_at(0, name.lexeme)
name.lexeme
name
s
c
name
s
c
@locals[expr.object]
@locals[expr]
@locals
expr.object
c
expr.object
c
pp ancestor(1).values[name.lexeme]
pp ancestor(0).values
pp ancestor(0).value
pp ancestor(0)
pp ancestor(0).values[name]
name
pp ancestor(1).values[name]
pp ancestor(1).values
ancestor(1).values
ancestor(distance).values
ancestor(distance)
name
distance
s
distance
n
@locals[expr]
@locals
expr
name
s
expr.keyword
s
expr.object
evaluate(expr.object)
expr
c
expr
c
value
name
c
pp @enclosing
@enclosing
value.to_s
name
c
name
c
name
c
name
n
environment.values
n
enclosing
s
@closure.to_s
@closure
instance
c
expr
c
expr.arguments
expr
n
expr
c
n
s
object
s
ancestor(distance).values[name]
distance
s
distance = 0
@locals
distance
s
expr
name
s
expr
s
c
n
s
n
c
s
name
expr
s
expr.name
s
expr
n
expr
step
s
expr
c
n
expr.name
s
expr
n
c
n
object.is_a? RoxInstance
expr.name
expr.value
object
object = evaluate(expr.object)
expr
s
self
expr
c
n
expr
n
expr
c
expr.name
expr.object
evaluate(expr.object)
expr.object
object
pp expr.object
pp expr
pp _
expr
expr.name
object
n
enclosing.get name; nil
enclosing
closure
name.lexeme
name
distance
disatnce
